<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gogo.mapper.StayMapper">

	<select id="stayList" resultType="com.gogo.vo.StayVO">
	SELECT subq3.stayNo,
		subq3.stayname,
		subq3.staytype,
		subq3.stayloc || '/' || SUBSTR(subq3.stayadress, INSTR(subq3.stayadress, ' ') + 1,
		INSTR(subq3.stayadress, ' ', INSTR(subq3.stayadress, ' ') + 1) -
		INSTR(subq3.stayadress, ' ') - 1) AS stayLoc,
		subq3.stdperson,
		subq3.overperson,
		subq3.badge,
		subq3.mainpic1,
		subq3.mainpic2,
		subq3.stayview,
		subq3.maxprice as maxprice,
		subq3.minprice as minprice,
		decode(like_count, null, 0, like_count) as likecount
	FROM (
		SELECT subq2.stayNo,
		subq2.stayNo AS stayNo_subq3, subq2.stayname,
		subq2.staytype,
		subq2.stayloc,
		subq2.stayadress,
		min(subq2.stdperson) OVER (PARTITION BY subq2.stayname) AS stdperson,
		max(subq2.overperson) OVER (PARTITION BY subq2.stayname) AS overperson,
		subq2.price,
		subq2.badge,
		subq2.mainpic1,
		subq2.mainpic2,
		subq2.stayview,
		MAX(subq2.price) OVER (PARTITION BY subq2.stayname) AS maxprice,
		MIN(subq2.price) OVER (PARTITION BY subq2.stayname) AS minprice,
		ROW_NUMBER() OVER (PARTITION BY subq2.stayname ORDER BY subq2.stayname) AS rn
	FROM (
		SELECT stay.stayNo, stayname,
		staytype,
		stayloc,
		stayadress,
		stdperson,
		overperson,
		price,
		badge,
		mainpic1,
		mainpic2,
		stayview
		FROM stay
		LEFT JOIN room ON stay.stayNo = room.stayNo
		) subq2
	) subq3
		LEFT JOIN (
		SELECT stayNo, COUNT(*) AS like_count
		FROM likestay
		GROUP BY stayNo
	) subq4
	ON subq3.stayNo_subq3 = subq4.stayNo
	WHERE subq3.rn = 1
	</select>
	
	
	
	
	
	
	
	
	
	
	<select id="stayKeywordList" resultType="com.gogo.vo.StayVO">
	SELECT subq3.stayNo,
		subq3.stayname,
		subq3.staytype,
		subq3.stayloc || '/' || SUBSTR(subq3.stayadress, INSTR(subq3.stayadress, ' ') + 1,
		INSTR(subq3.stayadress, ' ', INSTR(subq3.stayadress, ' ') + 1) -
		INSTR(subq3.stayadress, ' ') - 1) AS stayLoc,
		subq3.stdperson,
		subq3.overperson,
		subq3.badge,
		subq3.mainpic1,
		subq3.mainpic2,
		subq3.stayview,
		subq3.maxprice as maxprice,
		subq3.minprice as minprice,
		decode(like_count, null, 0, like_count) as likecount
		<if test='roomOption != null and !"".equals(roomOption)'>
			 ,subquery.roomNo,
		     subquery.babiqu,
		     subquery.pet,
		     subquery.pool,
		     subquery.terrace,
		     subquery.beamprojector
		</if>
	FROM (
		SELECT subq2.stayNo,
		subq2.stayNo AS stayNo_subq3, subq2.stayname,
		subq2.staytype,
		subq2.stayloc,
		subq2.stayadress,
		min(subq2.stdperson) OVER (PARTITION BY subq2.stayname) AS stdperson,
		max(subq2.overperson) OVER (PARTITION BY subq2.stayname) AS overperson,
		subq2.price,
		subq2.badge,
		subq2.mainpic1,
		subq2.mainpic2,
		subq2.stayview,
		MAX(subq2.price) OVER (PARTITION BY subq2.stayname) AS maxprice,
		MIN(subq2.price) OVER (PARTITION BY subq2.stayname) AS minprice,
		ROW_NUMBER() OVER (PARTITION BY subq2.stayname ORDER BY subq2.stayname) AS rn
	FROM (
		SELECT stay.stayNo, stayname,
		staytype,
		stayloc,
		stayadress,
		stdperson,
		overperson,
		price,
		badge,
		mainpic1,
		mainpic2,
		stayview
		FROM stay
		LEFT JOIN room ON stay.stayNo = room.stayNo
		) subq2
	) subq3
	<if test='roomOption != null and !"".equals(roomOption)'>
		left JOIN (
		  SELECT
		    stayNo,
		    roomNo,
		    babiqu,
		    pet,
		    pool,
		    terrace,
		    beamprojector,
		    ROW_NUMBER() OVER (PARTITION BY stayNo ORDER BY roomNo) AS sequence_number
		  FROM roomoptionyn
		) subquery
		ON subq3.stayNo_subq3 = subquery.stayNo
	</if>
		LEFT JOIN (
		SELECT to_number(stayNo) stayNo, COUNT(*) AS like_count
		FROM likestay
		GROUP BY stayNo
	) subq4
	ON subq3.stayNo_subq3 = subq4.stayNo
	WHERE subq3.rn = 1
			<if test='stayName != null and !"".equals(stayName)'>
				and stayname Like CONCAT(CONCAT('%', #{stayName}), '%')
			</if>		
			<if test='stayAdress != null and !"".equals(stayAdress)'>
				and stayLoc Like CONCAT(CONCAT('%', #{stayAdress}), '%')
			</if>	
			<if test='stdPerson != null and !"".equals(stdPerson)'>
				and stdperson >= #{stdPerson}
			</if>	
			<if test='maxPrice!= null and !"".equals(maxPrice)'>
				and minprice between 0 and #{maxPrice}
			</if>	
			<if test='stayType != null and !"".equals(stayType)'>
				and staytype = '${stayType}'
			</if>	
			<if test='stayView != null and !"".equals(stayView)'>
				and stayview = '${stayView}'
			</if>	
			<if test='roomOption != null and "babiqu".equals(roomOption)'>
				AND subquery.sequence_number = 1 and babiqu = 'Y' 
			</if>	
			<if test='roomOption != null and "pet".equals(roomOption)'>
				AND subquery.sequence_number = 1 and pet = 'Y' 
			</if>	
			<if test='roomOption != null and "pool".equals(roomOption)'>
				AND subquery.sequence_number = 1 and pool = 'Y'
			</if>	
			<if test='roomOption != null and "terrace".equals(roomOption)'>
				AND subquery.sequence_number = 1 and terrace = 'Y'
			</if>	
			<if test='roomOption != null and "beamprojector".equals(roomOption)'>
				AND subquery.sequence_number = 1 and beamprojector = 'Y'
			</if>
			
			<!-- 카테고리별 값 출력 -->
			<if test='category != null and "최신순".equals(category)'>
				order by stayno desc
			</if>		
			<if test='category != null and "인기순".equals(category)'>
				order by likecount desc
			</if>		
			<if test='category != null and "높은 가격순".equals(category)'>
				order by minprice desc
			</if>		
			<if test='category != null and "낮은 가격순".equals(category)'>
				order by minprice asc
			</if>	
			
			<!-- 왼쪽 카테고리 -->
			<if test='category != null and "모든 스테이".equals(category)'>
				order by likecount desc
			</if>
			<if test='category != null and "프로모션".equals(category)'>
				and badge = 'EXCLUSIVE'
			</if>			
			<if test='category != null and "너랑 가고싶어".equals(category)'>
				and badge = 'HOT'
			</if>			
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- room 정보 출력 -->
	<select id="roomInfo" resultType="java.util.Map">
	SELECT subq3.stayNo,
       subq3.stayname,
       subq3.staytype,
       subq3.stayloc || '/' || SUBSTR(subq3.stayadress, INSTR(subq3.stayadress, ' ') + 1, INSTR(subq3.stayadress, ' ', INSTR(subq3.stayadress, ' ') + 1) - INSTR(subq3.stayadress, ' ') - 1) AS stayLoc,
       subq3.stdperson,
       subq3.overperson,
       subq3.stayadress,
       subq3.badge,
       subq3.mainpic1,
       subq3.mainpic2,
       subq3.stayview,
       subq3.info,
       subq3.stayinfo,
       subq3.latitude,
       subq3.longitude,
       TO_CHAR(subq3.minprice, '999,999') as minprice,
       decode(like_count, null, 0, like_count) as likecount
       ,subquery.babiqu,
       subquery.pet,
       subquery.pool,
       subquery.terrace,
       subquery.beamprojector
	FROM (
	  SELECT subq2.stayNo, 
	        subq2.stayNo AS stayNo_subq3, subq2.stayname,
	         subq2.staytype,
	         subq2.stayloc,
	         subq2.stayadress,
	         min(subq2.stdperson) OVER (PARTITION BY subq2.stayname) AS stdperson,
         	 max(subq2.overperson) OVER (PARTITION BY subq2.stayname) AS overperson,
	         subq2.price,
	         subq2.badge,
	         subq2.mainpic1,
	         subq2.mainpic2,
	         subq2.stayview,
	         subq2.info,
	         subq2.stayinfo,
	         subq2.latitude,
         	 subq2.longitude,
	         MIN(subq2.price) OVER (PARTITION BY subq2.stayname) AS minprice,
	         ROW_NUMBER() OVER (PARTITION BY subq2.stayname ORDER BY subq2.stayname) AS rn
	  FROM (
	    SELECT stay.stayNo, stayname,
	           staytype,
	           stayloc,
	           stayadress,
	           stdperson,
           	   overperson,
	           price,
	           badge,
	           mainpic1,
	           mainpic2,
	           stayview,
	           info,
	           stayinfo,
	           latitude,
               longitude
	    FROM stay
	    LEFT JOIN room ON stay.stayNo = room.stayNo
	  ) subq2
	) subq3
	left JOIN (
	  SELECT
	    stayNo,
	    babiqu,
	    pet,
	    pool,
	    terrace,
	    beamprojector,
	    ROW_NUMBER() OVER (PARTITION BY stayNo ORDER BY roomNo) AS sequence_number
	  FROM roomoptionyn
	) subquery
	ON subq3.stayNo_subq3 = subquery.stayNo
	
	LEFT JOIN (
	  SELECT stayNo, COUNT(*) AS like_count
	  FROM likestay
	  GROUP BY stayNo
	) subq4
	ON subq3.stayNo_subq3 = subq4.stayNo
	WHERE subq3.rn = 1 and stayName = #{stayName} AND subquery.sequence_number = 1
	</select>
	
	<resultMap type="java.util.HashMap" id="roomInfo">
	    <result property="stayName" column="STAYNO" />
	    <result property="info" column="INFO" />
	    <result property="babiqu" column="BABIQU" />
	    <result property="pet" column="PET" />
	    <result property="pool" column="POOL" />
	    <result property="terrace" column="TERRACE" />
	    <result property="beamProjector" column="BEAMPROJECTOR" />
	</resultMap>
	
	<!-- 숙소 페이지에서 방 리스트 뽑기 -->
	<select id="stayRoomList" resultType="java.util.Map">
		select * 
		from(	
			SELECT 
			  room.roomno as roomno,
			  roomName,
			  stdperson,
			  overperson,
			  TO_CHAR(PRICE, '999,999') AS price,
			  roomtype,
			  bed,
			  roomphoto.field as field,
			  ROW_NUMBER() OVER (PARTITION BY room.roomno ORDER BY room.roomno) AS rn
			FROM room
			LEFT JOIN roomoptionyn ON room.roomno = roomoptionyn.roomno
			LEFT JOIN roomphoto ON room.roomno = roomphoto.roomno
			WHERE room.stayNo = (SELECT stayNo FROM stay WHERE stayName = #{stayName})
		) subquery
		where rn = 1
	</select>
	<resultMap type="java.util.HashMap" id="stayRoomList">
	    <result property="bed" column="BED" />
	    <result property="field" column="FIELD" />
	</resultMap>
	
	<!-- 객실 페이지에서 정보 뽑기 -->
	<select id="roomInfoPageList" resultType="java.util.Map">
		SELECT 
		(SELECT STAYNAME FROM STAY WHERE STAYNO = (select STAYNO from room where roomname=#{roomName})) AS STAYNAME, 
		room.roomno as roomno , room.stayno as stayno, roomname, stdperson, overperson, roominfo, bed, price, roomtype, info, bathroom, kitchen, parking, babiqu, pet, terrace, pool, beamprojector
		FROM ROOM 
		LEFT JOIN ROOMOPTIONYN
		ON ROOM.ROOMNO = ROOMOPTIONYN.ROOMNO
		WHERE ROOMNAME = #{roomName} AND ROOM.STAYNO = (SELECT STAYNO FROM STAY WHERE STAYNAME=#{stayName})
	</select>
	<resultMap type="java.util.HashMap" id="roomInfoPageList">
	    <result property="stayName" column="STAYNAME" />
	    <result property="bathroom" column="BATHROOM" />
	    <result property="kitchen" column="KITCHEN" />
	    <result property="parking" column="PARKING" />
	    <result property="babiqu" column="BABIQU" />
	    <result property="pet" column="PET" />
	    <result property="terrace" column="TERRACE" />
	    <result property="pool" column="POOL" />
	    <result property="bed" column="BED" />
	    <result property="beamprojector" column="BEAMPROJECTOR" />
	</resultMap>
	<!-- 객실 페이지에서 객실 사진 뽑아오기 -->
	<select id="roomInfoPagePic" resultType="com.gogo.vo.RoomPhotoVO">
		select * from roomphoto where stayno = (SELECT STAYNO FROM STAY WHERE STAYNAME=#{stayName}) and roomno = (select roomno from room where roomname=#{roomName})
	</select>
	
</mapper>